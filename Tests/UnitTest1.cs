using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NUnit;
using NUnit.Framework;
using NormalBas;

namespace Tests {
    [TestFixture]
    public class UnitTest1 {
        [Test]
        [TestCase
        [TestCase("11010000100010011101111111011010110001111010100011100001001001000100101011111111010101001011011010111101010100011101011001001101000011001011000111111110000010110000010001110111101011011111010010001101000100111001001010110101101100101", "00100011000001011100011000011110011000111100100011000001000111000111100100101001100010101111111000111111011000001100100100100001010000110011111010100000001010111011100000100000001001111010011101011111101000100100011001011110111110010", "11110011100011000001100111000100101001000110000000100000001110000011001111010110110111100100100010000010001100010001111101101100010011111000111101011110001000001011110001010111100010100101001111010010101100011101010011101011010010111")]
        [TestCase
        public void AddTest(string a, string b, string expectedResult) {
            int[] p1 = new int[1];
            int[] p2 = new int[1];
            p1 = Program.StrToByt(a);
            p2 = Program.StrToByt(b);
            var actualResult = Program.BytToStr(Program.Add(p1, p2));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase("10110100110001001100010000110010100100100110010001100101100101111010111111010101110000011010110111010110111010110100010101011101001000010011100110011111111010101111010010101111101110011111110000001100111011101000010110101010111011000", "01011010011000100110001000011001010010010011001000110010110010111101011111101010111000001101011011101011011101011010001010101110100100001001110011001111111101010111101001010111110111001111111000000110011101110100001011010101011101100")]
        [TestCase("10111011111001001110100101001110101010011000000000110110110100100111111010001110001010000110110011001010110000010000001100001001000100001001101010001011010010011010111111111110110111111110000011001111100111010011111111001111001100101", "11011101111100100111010010100111010101001100000000011011011010010011111101000111000101000011011001100101011000001000000110000100100010000100110101000101101001001101011111111111011011111111000001100111110011101001111111100111100110010")]
        [TestCase("10111011111001001110100101001110101010011000000000110110110100100111111010001110001010000110110011001010110000010000001100001001000100001001101010001011010010011010111111111110110111111110000011001111100111010011111111001111001100101", "11011101111100100111010010100111010101001100000000011011011010010011111101000111000101000011011001100101011000001000000110000100100010000100110101000101101001001101011111111111011011111111000001100111110011101001111111100111100110010")]
        public void SQTest(string a, string expectedResult) {
            int[] p = new int[1];
            p = Program.StrToByt(a);
            var actualResult = Program.BytToStr(Program.SQ(p));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase("111", 1)]
        [TestCase("011", 0)]
        [TestCase("101", 0)]
        [TestCase("001", 1)]
        public void TrTest(string a, int expectedResult) {
            int[] p = new int[1];
            p = Program.StrToByt(a);
            var actualResult = Program.Tr(p);
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase
        [TestCase
        [TestCase
        public void MultiTest(string a, string b, string expectedResult) {
            int[] p1 = new int[1];
            int[] p2 = new int[1];
            p1 = Program.StrToByt(a);
            p2 = Program.StrToByt(b);
            var actualResult = Program.BytToStr(Program.Multi(p1, p2));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase
        [TestCase
        [TestCase
        public void BPTest(string a, string N, string expectedResult) {
            int[] p = new int[1];
            int[] n = new int[1];
            p = Program.StrToByt(a);
            n = Program.StrToByt(N);
            var actualResult = Program.BytToStr(Program.BP(p, n));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase("11111100100111000010101100101000101001000101010100010111011011110001001111100101100110101000000100000011100010111101010111000100101101000010111000100110111101010110101101101101100111111111010101101001111010000100100011000011110101010", "00110111101101100011011000000001010010011010010000000000011011011110010000110111100010100001010000000101001000001000100010100001001111010011000101110110110010011010100111000110001000111011101111111110111101001011001101100110110011100")]
        [TestCase("00001111101111001000100110011001000111111110100010101100000010110101000110000000111001100011001100010101011011110011101010001001111001010100011000101110100011011111000110110111001100101110100010011111011001111111100111110110100011010", "10101100000000001100001101010000000111000101011101111001011001110111111011011001010011100001011011111100010010000000111001100010110101010010101100001010101111100101010110110110000100110100100111001111011001011110001110100001010110100")]
        [TestCase("00011110101100010000000001010011110110001001101101100011101100001001000100110110110101110111101000001000000111011100111100011100101111100011101011101011100010100011000101000001101101010011100010101000111111100000100100101001001001001", "11111110001010111101000000110010100111010110011100101011001001100001101011111110100101100001101011011100001010110010111000100001010001011001010000110001101100010001101001011000111111010001000100111101001000110000110111001111100110001")]
        public void InvTest(string a, string expectedResult) {
            int[] p = new int[1];
            p = Program.StrToByt(a);
            var actualResult = Program.BytToStr(Program.Inv(p));
            Assert.AreEqual(expectedResult, actualResult);
        }
    }
}
